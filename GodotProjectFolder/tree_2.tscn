[gd_scene load_steps=9 format=3 uid="uid://s50oblcaavj"]

[ext_resource type="Texture2D" uid="uid://hreirubmxmtm" path="res://Textures/leavestuft.png" id="2_1fhr5"]
[ext_resource type="PackedScene" uid="uid://kfd53p86720d" path="res://treemodel.tscn" id="2_u6he7"]

[sub_resource type="Shader" id="Shader_oko5y"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.beta7's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_lambert,specular_schlick_ggx,vertex_lighting,shadows_disabled;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_disable;
uniform float alpha_scissor_threshold;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_disable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_nearest,repeat_disable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	POINT_SIZE=point_size;
	ROUGHNESS=roughness;
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	VERTEX.y += sin(TIME * 2. + VERTEX.x * 1.) * 0.1;
	VERTEX.z += sin(TIME * 2. + VERTEX.x * 1.) * 0.1;
	
	// Perspective scale clamping (to reduce distortion from upscaling)
	float s = -(MODELVIEW_MATRIX)[3].z / PROJECTION_MATRIX[0][0];
	float w = (VIEWPORT_SIZE.x / 2.) * 0.05;//half the viewport width * max size (sprite pixel size)
	float max_size_thresh = 8.;
	float min_size_thresh = 3.;
	if (s < w - min_size_thresh) {
		float scale = s / (w - min_size_thresh);
		POINT_SIZE = point_size / scale;
	} if (s > w + max_size_thresh) {
		float scale = s / (w + max_size_thresh);
		POINT_SIZE = point_size / scale;
	}
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,POINT_COORD);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	ALPHA *= albedo.a * albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1q4gl"]
render_priority = 0
shader = SubResource("Shader_oko5y")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/alpha_scissor_threshold = 0.5
shader_parameter/metallic = 0.0
shader_parameter/metallic_texture_channel = Plane(1, 0, 0, 0)
shader_parameter/point_size = 32.0
shader_parameter/roughness = 1.0
shader_parameter/specular = 0.5
shader_parameter/texture_albedo = ExtResource("2_1fhr5")
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)

[sub_resource type="SphereMesh" id="SphereMesh_157k8"]
material = SubResource("ShaderMaterial_1q4gl")
radius = 1.532
height = 2.116
radial_segments = 4
rings = 3

[sub_resource type="Animation" id="Animation_5ohbh"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0.0349066, 0.0785398, 0.0331613)]
}

[sub_resource type="Animation" id="Animation_drx2v"]
resource_name = "Sway"
length = 2.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1, 2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector3(0.0349066, 0.0785398, 0.0331613), Vector3(0, 0, 0), Vector3(0.0349066, 0.0785398, 0.0331613)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_yenxv"]
_data = {
"RESET": SubResource("Animation_5ohbh"),
"Sway": SubResource("Animation_drx2v")
}

[node name="tree2" type="Node3D"]

[node name="MeshInstance3D13" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0519244, 4.50928, 1.35432)
cast_shadow = 0
mesh = SubResource("SphereMesh_157k8")

[node name="MeshInstance3D14" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.3739, 4.24906, -0.181106)
cast_shadow = 0
mesh = SubResource("SphereMesh_157k8")

[node name="MeshInstance3D15" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.47892, 5.05569, 1.12759)
cast_shadow = 0
mesh = SubResource("SphereMesh_157k8")

[node name="MeshInstance3D16" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.0873, 5.05569, -1.41954)
cast_shadow = 0
mesh = SubResource("SphereMesh_157k8")

[node name="MeshInstance3D17" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.222828, 4.71332, -1.41954)
cast_shadow = 0
mesh = SubResource("SphereMesh_157k8")

[node name="MeshInstance3D18" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.13167, 4.50473, -0.540132)
cast_shadow = 0
mesh = SubResource("SphereMesh_157k8")

[node name="MeshInstance3D19" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.800139, 5.58497, 0.647362)
cast_shadow = 0
mesh = SubResource("SphereMesh_157k8")

[node name="treemodel" parent="." instance=ExtResource("2_u6he7")]
transform = Transform3D(1.19575, -0.0363796, 0.0940934, 0.039762, 1.19861, -0.0418793, -0.0927147, 0.044849, 1.19557, 0, -0.232853, 0)

[node name="AnimationPlayer" type="AnimationPlayer" parent="treemodel"]
autoplay = "Sway"
libraries = {
"": SubResource("AnimationLibrary_yenxv")
}
